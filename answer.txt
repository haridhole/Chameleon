/* 
Prompt:
  We have defined a basic dropdown via the Dropdown and DropdownItem components below, with example usage
  in the ExampleNav component. The Dropdown and DropdownItem components have some problems, and also 
  have room for improvements (doesn't everything?) A couple items TODO here (make sure to explain with comments!)
  
  0. How are you today? ðŸ˜Š
  1. Please fix any obvious issues you see with the dropdown.
  2. Please then make improvements to the dropdown.
  3. Consider the different ways that this dropdown might be used and what changes would
     be neccessary to make it more flexible.
  4. If we wanted to sync this dropdown selection to the server with
     app.sync('PATCH', 'user', { dropdown_1_state: {true,false} }) where would this be included?
  5. If we wanted to pass children (like this example) OR a Promise that resolves to an array of items
     what changes should be made? (just a sentence or two or some code is ok).
  
  PS: No need to worry about CSS.
 */

 /*
Answers:
  Typos:
    constuctor => constructor 45
    expended => expanded  71
  Ternary operator correction (isOpen ? 'dropdown-open' : 'dropdown-menu') 74
  Use of functional components(no constructor and bind) and react hooks along with ES6 features(eg. arrow functions)
  Use of redux store for state management 
  Pass Children via props
    const Test = (props) => <div> {props.children} </div>
*/

import React, {PureComponent} from 'react';

class Dropdown extends PureComponent {
  constructor(props) {    // constuctor => constructor
    super(props);
    this.state = {
      isOpen: false,
    };
      // bind function in case of class based components
    this.toggle = this.toggle.bind(this);
  }

    // defining state of a component
  state = {
    isOpen: false,
  };

  toggle() {
    this.setState(previousState => {
      return { isOpen: previousState.isOpen === false ? true : false}
    });
  }

  render() {
    const {isOpen} = this.state;
    const {label} = this.props;

    return (
      <div className="dropdown">
        <button type="button" className="dropdown-button" id="dropdownButton" aria-haspopup="true" aria-expanded={isOpen} onClick={this.toggle}>{label}</button>

        <ul className={`${isOpen ? 'dropdown-open' : 'dropdown-menu'}`} aria-labelledby="dropdownButton" role="menu">
          {this.props.children}
        </ul>
      </div>
    );
  }
}

class DropdownItem extends PureComponent {
  // 4. If we wanted to sync this dropdown selection to the server with
  // app.sync('PATCH', 'user', { dropdown_1_state: {true,false} }) where would this be included?
  /* HERE */
  render() {
    // TODO implement me
    const { href } = this.props
    return(
      <div>
        <a href={href}>{this.props.children}</a>
      </div>
    )
  }
}

export class ExampleNav extends PureComponent {
  render() {
    return (
      <nav>
        <a href="/page1">Page 1</a>
        <Dropdown label="More items">
          <DropdownItem href="/page2">Page 2</DropdownItem>
          <DropdownItem href="/page3">Page 3</DropdownItem>
          <DropdownItem href="/page4">Page 4</DropdownItem>
        </Dropdown>
        <Dropdown label="Even more items">
          <DropdownItem href="/page5">Page 5</DropdownItem>
          <DropdownItem href="/page6">Page 6</DropdownItem>
        </Dropdown>
      </nav>
    );
  }
}
